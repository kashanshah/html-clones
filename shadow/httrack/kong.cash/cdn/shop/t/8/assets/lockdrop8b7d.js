let provider,web3;const KONG_ERC20_ADDR="0x177F2aCE25f81fc50F9F6e9193aDF5ac758e8098",KONG_ERC20_ABI=[{constant:!0,inputs:[],name:"name",outputs:[{name:"",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"spender",type:"address"},{name:"value",type:"uint256"}],name:"approve",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"totalSupply",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"sender",type:"address"},{name:"recipient",type:"address"},{name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"decimals",outputs:[{name:"",type:"uint8"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"",type:"address"}],name:"_minters",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"spender",type:"address"},{name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"amount",type:"uint256"}],name:"burn",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[],name:"beginLockDrop",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"account",type:"address"}],name:"balanceOf",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"_totalMinted",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"account",type:"address"},{name:"amount",type:"uint256"}],name:"burnFrom",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"_launchTimestamp",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"mintedAmount",type:"uint256"},{name:"recipient",type:"address"}],name:"mint",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"symbol",outputs:[{name:"",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"minter",type:"address"}],name:"addMinter",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"_lastLockDropAddress",outputs:[{name:"",type:"address"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"spender",type:"address"},{name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"recipient",type:"address"},{name:"amount",type:"uint256"}],name:"transfer",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"_owner",outputs:[{name:"",type:"address"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"getMintingLimit",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"owner",type:"address"},{name:"spender",type:"address"}],name:"allowance",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"_lastLockDropTimestamp",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{inputs:[],payable:!1,stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!1,name:"deployedBy",type:"address"},{indexed:!1,name:"deployedTimestamp",type:"uint256"},{indexed:!1,name:"deployedSize",type:"uint256"},{indexed:!1,name:"deployedAddress",type:"address"}],name:"LockDropCreation",type:"event"},{anonymous:!1,inputs:[{indexed:!1,name:"minter",type:"address"}],name:"MinterAddition",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"owner",type:"address"},{indexed:!0,name:"spender",type:"address"},{indexed:!1,name:"value",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"from",type:"address"},{indexed:!0,name:"to",type:"address"},{indexed:!1,name:"value",type:"uint256"}],name:"Transfer",type:"event"}],LOCKDROP_ABI=[{constant:!0,inputs:[],name:"_kongERC20Address",outputs:[{name:"",type:"address"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"",type:"address"}],name:"_lockingEnds",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"",type:"address"}],name:"_weights",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"stakingPeriod",type:"uint256"}],name:"stakeETH",outputs:[],payable:!0,stateMutability:"payable",type:"function"},{constant:!1,inputs:[],name:"claimKong",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"_weightsSum",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"_stakingEnd",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{inputs:[{name:"kongERC20Address",type:"address"}],payable:!1,stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,name:"contributor",type:"address"},{indexed:!1,name:"lockETHAddress",type:"address"},{indexed:!1,name:"ethStaked",type:"uint256"},{indexed:!1,name:"endDate",type:"uint256"}],name:"Staked",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimant",type:"address"},{indexed:!1,name:"ethStaked",type:"uint256"},{indexed:!1,name:"kongClaim",type:"uint256"}],name:"Claimed",type:"event"}],LOCKETH_ABI=[{constant:!1,inputs:[],name:"unlockETH",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"_contractOwner",outputs:[{name:"",type:"address"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"_endOfLockUp",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{inputs:[{name:"endOfLockUp",type:"uint256"},{name:"contractOwner",type:"address"}],payable:!0,stateMutability:"payable",type:"constructor"}];var contributionCount=0,contributionTotalEth=0,eventList=null;$(async function(){$("#enrollPushReminder").click(function(event){console.log("click enroll"),OneSignal.push(function(){OneSignal.showSlidedownPrompt()}),event.preventDefault()}),await enableInjectedWeb3EthereumConnection(),setupWeb3Provider(),checkNetwork(),$("#kongContractAddress").prop("href","https://etherscan.io/token/"+KONG_ERC20_ADDR),lastLockDropAddress=await getDeployedLockDrops(),$("button.injectedWeb3").click(await stakeEth)});async function asyncForEach(array,callback){for(let index=0;index<array.length;index++)await callback(array[index],index,array)}async function getDeployedLockDrops(){var KongERC20Deployed=new web3.eth.Contract(KONG_ERC20_ABI,KONG_ERC20_ADDR);eventList=await KongERC20Deployed.getPastEvents("LockDropCreation",{fromBlock:0,toBlock:"latest"}),eventList.reverse(),asyncForEach(eventList,async(event,index)=>{await loadLockDrop(event.returnValues.deployedAddress,event.returnValues.deployedTimestamp)});var lastLockDropAddress2=eventList[0].returnValues.deployedAddress;return lastLockDropAddress2}async function loadLockDrop(address,timestamp){var LockDropDeployed=new web3.eth.Contract(LOCKDROP_ABI,address),stakedEventList=await LockDropDeployed.getPastEvents("Staked",{fromBlock:0,toBlock:"latest"});await getLockDropContributions(LockDropDeployed,timestamp),address==lastLockDropAddress&&($("#lastLockDropAddress").text(lastLockDropAddress),$("#lastLockDropAddress").prop("href","https://etherscan.io/address/"+lastLockDropAddress),$("#kongLockCode").prop("href","https://etherscan.io/address/"+lastLockDropAddress+"#code"),latestLockDrop=LockDropDeployed)}async function getLockDropContributions(lockDrop,timestamp){if(lockDrop.options.address==lastLockDropAddress){for(var stakedEventList=await lockDrop.getPastEvents("Staked",{fromBlock:0,toBlock:"latest"}),i=stakedEventList.length-1;i>=0;i--)contributionTotalEth+=parseInt(stakedEventList[i].returnValues.ethStaked)/10**18,contributionCount++;contributionCount>1&&($("#lockDropContributorCount").text(contributionCount),$("#lockDropContributorEth").text(contributionTotalEth.toFixed(3)),$("#lockDropContributors").show());var stakingEnd=await lockDrop.methods._stakingEnd().call();console.log(stakingEnd)}else{var stakedEventList=await lockDrop.getPastEvents("Staked",{fromBlock:0,toBlock:"latest",filter:{contributor:web3.utils.toChecksumAddress(web3.eth.currentProvider.selectedAddress)}}),claimedEventList=await lockDrop.getPastEvents("Claimed",{fromBlock:0,toBlock:"latest",filter:{claimant:web3.utils.toChecksumAddress(web3.eth.currentProvider.selectedAddress)}});if(deployDate=new Date(timestamp*1e3),$("#prevLockDropHeader").append(`<div class="home-reserve-product" id="${lockDrop.options.address}">          <div class="col title">            <div class="text">              <span class="number">Deployed <h3>${deployDate.toLocaleDateString("en-CA")}</h3></span>            </div>          </div>          <div class="col paragraph">            <p><a href="https://etherscan.io/address/${lockDrop.options.address}">${lockDrop.options.address}</a></p>          </div>          <div class="col buy" id="${lockDrop.options.address}_contributorButtons">            <button class="button full w185 claimKong" href="#" id="${lockDrop.options.address}_claimButton" value="${lockDrop.options.address}" disabled>              Claim Kong            </button>            <button class="button full w185 unlockEth" href="#" id="${lockDrop.options.address}_unlockButton" value="${lockDrop.options.address}" disabled>              Unlock ETH            </button>            
          </div>        </div>`),$(`#${lockDrop.options.address}_contributorButtons`).hide(),$(`#${lockDrop.options.address}_claimButton`).hide(),$(`#${lockDrop.options.address}_unlockButton`).hide(),stakedEventList[0]){var event=stakedEventList[0],balance=await web3.eth.getBalance(event.returnValues.lockETHAddress);if(event.returnValues.endDate*1e3<Date.now())if($(`#${lockDrop.options.address}_contributorButtons`).show(),$(`#${lockDrop.options.address}_claimButton`).click(function(){claimKong(lockDrop)}).prop("disabled",!1),$(`#${lockDrop.options.address}_claimButton`).show(),balance>0){var LockEthDeployed=new web3.eth.Contract(LOCKETH_ABI,event.returnValues.lockETHAddress);$(`#${lockDrop.options.address}_unlockButton`).show(),$(`#${lockDrop.options.address}_unlockButton`).click(function(){unlockEth(LockEthDeployed)}).prop("disabled",!1)}else $(`#${lockDrop.options.address}_unlockButton`).text("ETH Unlocked"),$(`#${lockDrop.options.address}_unlockButton`).show();else console.log(`end date ${event.returnValues.endDate*1e3} greater than now ${Date.now()} - ${lockDrop.options.address}`),$(`#${lockDrop.options.address}_contributorButtons`).show(),$(`#${lockDrop.options.address}_claimButton`).text("Staked"),$(`#${lockDrop.options.address}_claimButton`).show(),$(`#${lockDrop.options.address}_unlockButton`).text("Locked"),$(`#${lockDrop.options.address}_unlockButton`).show()}claimedEventList[0]&&$(`#${lockDrop.options.address}_claimButton`).text("Kong Claimed").prop("disabled",!0)}}async function stakeEth(){console.log("stakeEth called");const locktime=$("input[name=locktime]:checked").val();if(locktime){if(locktime<30||locktime>365){alert("Lock time must be between 30 and 365 days.");return}}else{alert("Please select a lock time.");return}let ethLockAmount=$("#ETH_LOCK_AMOUNT").val();if(isNaN(+ethLockAmount)||+ethLockAmount<=0){alert("Please enter a valid ETH amount.");return}const coinbaseAcct=await web3.eth.getCoinbase();params={from:coinbaseAcct,value:web3.utils.toWei(ethLockAmount,"ether"),gasLimit:42e4},latestLockDrop.methods.stakeETH(locktime).send(params,function(err,txHash){err?(console.log(err),alert(err.message)):($("#lockDropTxDiv").show(),console.log(txHash),$("#lockDropTx").text(txHash),$("#lockDropTx").prop("href","https://etherscan.io/tx/"+txHash))})}function claimKong(lockDrop){params={from:web3.eth.currentProvider.selectedAddress,gasLimit:1e5},lockDrop.methods.claimKong().send(params,function(err,txHash){err?(console.log(err),alert(err.message)):($("#lockDropTxDiv").show(),console.log(txHash),$("#lockDropTx").text(txHash),$("#lockDropTx").prop("href","https://etherscan.io/tx/"+txHash))})}function unlockEth(lockEth){params={from:web3.eth.currentProvider.selectedAddress,gasLimit:6e4},lockEth.methods.unlockETH().send(params,function(err,txHash){err?(console.log(err),alert(err.message)):($("#lockDropTxDiv").show(),console.log(txHash),$("#lockDropTx").text(txHash),$("#lockDropTx").prop("href","https://etherscan.io/tx/"+txHash))})}function isHex(inputString){const re=/^(0x)?[0-9A-Fa-f]+$/g,result=re.test(inputString);return re.lastIndex=0,result}function checkNetwork(){web3.eth.net.getId().then(netId=>{switch(netId){case 1:break;default:console.log("This is an unknown network."),alert("There are no Kong lockdrops deployed on this network. Please switch to Mainnet to participate in the lockdrop.")}})}function setupWeb3Provider(){typeof window.ethereum<"u"&&(window.ethereum.isToshi||window.ethereum.isCoinbaseWallet)&&$('[target="_blank"]').removeAttr("target"),typeof window.ethereum<"u"||typeof window.web3<"u"?provider=window.ethereum||window.web3.currentProvider:web3=new Web3(new Web3.providers.HttpProvider("https://eth.cryptocash.pub")),web3=new window.Web3(provider)}async function enableInjectedWeb3EthereumConnection(){try{await ethereum.enable()}catch{alert("Cannot find Web3 provider. Please reload page with wallet like MetaMask installed.")}}
//# sourceMappingURL=/cdn/shop/t/8/assets/lockdrop.js.map?v=29152238461909057481606242998
